@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Inwentaryzacja.Shared.Models
@using Inwentaryzacja.Shared.Models.Services

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject HttpClient client
@inject IJSRuntime JsRuntime

@attribute [AllowAnonymous]

<AuthorizeView>
    <Authorized>
        @if(context.User.Identity.IsAuthenticated && users != null)
        {
            string[] name = context.User.Identity.Name.Split(' ');
            string mail = context.User.Claims.Where(c => c.Type == "preferred_username").First().Value;
            DateTime logged = DateTime.Now;

            Console.WriteLine($"name={name[0]} last name={name[1]} \n mail={mail} \n logged={logged.ToString()}");

            user = users.FirstOrDefault(u => u.Mail == mail);

            if (user == null)
            {
                user = new User()
                {
                    Name = name[0],
                    Lastname = name[1],
                    Mail = mail,
                    LastLogged = logged
                };

                Console.WriteLine("user byl null");

                client.PostAsJsonAsync<User>("api/user", user);
            }
            else
            {
                Console.WriteLine("user nie byl null");

                user.LastLogged = logged;

                client.PutAsJsonAsync<User>("api/user", user);
            }
        }
        Cześć, @context.User.Identity.Name! 
        
        @*@foreach (var claim in context.User.Claims)
        {
            
            Console.WriteLine("claim: " + claim + " claim type: " + claim.Type + " claim value type: " + claim.ValueType + " value: " + claim.Value);
        }*@
        <button class="nav-link btn btn-link" @onclick="BeginLogout">
            Wyloguj
        </button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Zaloguj</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    User? user { get; set; }

    User[]? users;

    bool loginInfo = false;

    protected override async Task OnInitializedAsync()
    {
        users = await client.GetFromJsonAsync<User[]>("api/user");
    }

    private async Task BeginLogout(MouseEventArgs args)
    {  
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

}